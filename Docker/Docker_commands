Each container has its own set of namespaces[PID,USER,UTS,NS,NET,IPC]
UTS is hostname and domain name, NS mount points, IPC is inter-process communication
MNT - Mount and unmount directories without affecting other namespaces.
cgroup controls limits and monitor of resources
Container are process run on shared kernel
Docker is tooling to manage containers, package dependencies with containers
# docker container run -t ubuntu top
//-t flag allocates a pseudo-TTY, which you need for the top to work correctly
run new container and ssh the ip address of first terminal
get container ID use #docker container ls -la
//Using docker container exec with bash is a common pattern to inspect a docker container.
# docker container exec -it <Cont_ID> bash

------------------------------------------------------------------------------------------
Run multiple containers, nginx server
$ docker container run --detach --publish 8080:80 --name nginx nginx
//The --detach flag will run this container in the background. 
The publish flag publishes port 80 in the container (the default port for nginx), using port 8080 on our host.
Remember that the NET namespace gives processes of the container their own network stack. 
The --publish flag is a feature that allows us to expose networking through the container onto the host.

//run a mongoDB server.
#docker container run --detach --publish 8081:27017 --name mongo mongo:3.4
#docker container inspect [container id]
//more information than ls
-----------------------------------------------------------------
clean up with 
# docker container stop [container id]
#docker system prune

----------------------------------------------------------------------------------------
Docker images
Tar file containing a container's filesystem + metadata, for sharing and redistribution
Push images to central registry and pull images from registry to download other images
-create a Dockerfile which list of "instructions"
-docker build -f Dockerfile
Docker image layers
union file system merge image layers into single file system for each container
copy-on-write copies files that are edited up to top writable layers


create python app
---------------------------------------------
from flask import Flask

app = Flask(__name__)

@app.route("/")
def hello():
    return "hello world!"

if __name__ == "__main__":
    app.run(host='0.0.0.0')
    



/ create docker image by creating dockerfile /

# vim Dockerfile

FROM python:3.6.1-alpine
RUN pip install flask
COPY app.py /app.py
CMD ["python","app.py"]

$ docker image build -t python-hello-world .
/ Pass in -t to name your image python-hello-world.
$ docker image ls
/  to verify that your image shows up in your image list.
$ docker run -p 5001:5000 -d python-hello-world
$ docker container logs [container id] 
/Check the log output of the container
$ docker push [dockerhub username]/python-hello-world
/to push your image to the Docker Hub registry.

//Update app.py by replacing the string "Hello World" with "Hello Beautiful World!" in app.py.
//Get a list of the containers running using docker container ls.
Each layer of the image is read-only, except for the very top layer which is created for the container. 
The read/write container layer implements "copy-on-write" which means
that files that are stored in lower image layers are pulled up to the read/write container layer only when edits are being made to those files. 
Those changes are then stored in the container layer. The "copy-on-write" function is very fast, and in almost all cases, does not have a noticeable effect on performance. 
You can inspect which files have been pulled up to the container level with the docker diff command. 
You can also experience the sharing of layers when you start multiple containers from the same image//  

$ docker container stop [container id] 
$ docker system prune
//It will remove any stopped containers, unused volumes and networks, and dangling images.
$  docker image build -t [dockerhub username]/python-hello-world .

